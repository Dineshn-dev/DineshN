// verilog code for jk flip flop

module jkflip_flop (j,k,clk,rst,q,qb);
input j,k,clk,rst;
output reg q,qb;
always@(posedge clk)
begin
if(rst)
begin
q=0;
qb=~q;
end
else
begin
case({j,k})
2'd0:q=q;
2'd1:q=0;
2'd2:q=1;
2'd3:q=qb;
endcase
qb=~q;
end
end
endmodule

//assynchronous counter verilog code using jkfliflop

module asychronous_counter_using_jkflipflop(j,k,clk,rst,q,qb
    );
input j,k,clk,rst;
output [3:0] q,qb;
jkflip_flop x1 (j,k,clk,rst,q[0],qb[0]);
jkflip_flop x2 (j,k,qb[0],rst,q[1],qb[1]);
jkflip_flop x3 (j,k,qb[1],rst,q[2],qb[2]);
jkflip_flop x4 (j,k,qb[2],rst,q[3],qb[3]);
endmodule

//testbench for assynchronous counter verilog code using jkfliflop

module async_counter_jKff_tb;

	// Inputs
	reg j;
	reg k;
	reg clk;
	reg rst;

	// Outputs
	wire [3:0] q;
	wire [3:0] qb;

	// Instantiate the Unit Under Test (UUT)
	asychronous_counter_using_jkflipflop uut (
		.j(j), 
		.k(k), 
		.clk(clk), 
		.rst(rst), 
		.q(q), 
		.qb(qb)
	);

	initial begin
		// Initialize Inputs
		j = 0;
		k = 0;
		clk = 1;
		rst = 1;

		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here
		rst = 1;
		j=1;k=1;#100;
		rst = 0;
		j=1;k=1;#100;
	end
      always #50 clk=~clk;
endmodule
