//dflip_flop_synchronous with only q output

module dflip_flop_synchronous(d,rst,clk,q);
input d,rst,clk;
output reg q;
always@(posedge clk)
begin
if(rst)
q=0;
else
q=d;
end
endmodule

//dflip_flop _synchronous with q and qbar output 

module dflip_flop_synchronous(d,rst,clk,q,qb);
input d,rst,clk;
output reg q,qb;
always@(posedge clk)
begin
if(rst)
begin
q=0;qb=~q;
end
else
begin
q=d;qb=~q;
end
end
endmodule

//testbench code for above dflip_flop with q and qbar output
module dff_tb;

	// Inputs
	reg d;
	reg rst;
	reg clk;

	// Outputs
	wire q;
	wire qb;

	// Instantiate the Unit Under Test (UUT)
	dflip_flop_synchronous uut (
		.d(d), 
		.rst(rst), 
		.clk(clk), 
		.q(q),
		.qb(qb)
	);

	initial begin
		// Initialize Inputs
		d = 0;
		rst = 0;
		clk = 0;

		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here
      d = 1;
		rst = 1;#100;
		d = 0;
		rst = 0;#100
		d = 1;
		rst = 0;#100;
		d=1;
		rst=0;#100;
	end
	always #100 clk=~clk;
endmodule
