//////////////////verilog code for single port ram//////////////////////
module single_port_ram(clk,cs,wr_en,rd_en,oe_en,data_in,address,data_out
    );
input clk,cs,wr_en,rd_en,oe_en;
input [3:0]data_in; 
input [3:0]address;
output reg [3:0] data_out;
reg [7:0] ram[15:0];
always@(posedge clk)
begin
//writing the data on to ram on specified address
if(wr_en &&~(oe_en)&& cs)
begin
ram[address]<=data_in;
data_out<=data_out;
end
//reading the data from ram on specified address
else if(rd_en && oe_en && cs&&~wr_en)
begin
data_out<=ram[address];
end
//output made to zero if chip is not selected
else
data_out=0;
end
endmodule

////////////////////////////Test_bench for single port ram///////////////////////////////
module ram_tb;

	// Inputs
	reg clk;
	reg cs;
	reg wr_en;
	reg rd_en;
	reg oe_en;
	reg [7:0] data_in;
	reg [3:0] address;

	// Outputs
	wire [3:0] data_out;

	// Instantiate the Unit Under Test (UUT)
	single_port_ram uut (
		.clk(clk), 
		.cs(cs), 
		.wr_en(wr_en), 
		.rd_en(rd_en), 
		.oe_en(oe_en), 
		.data_in(data_in), 
		.address(address), 
		.data_out(data_out)
	);

	initial begin
		// Initialize Inputs
		clk = 1;
		cs = 1;
		wr_en = 0;
		rd_en = 0;
		oe_en = 0;
		data_in = 8'd14;
		address = 4'd3;

		// Wait 100 ns for global reset to finish
		#100;
		
        
		// Add stimulus here

		wr_en = 1;
		rd_en = 0;
		oe_en = 0;
		data_in = 8'd14;
		address = 4'd3;#100;
		wr_en = 0;
		rd_en = 1;
		oe_en = 1;
		data_in = 8'd14;
		address = 4'd3;#100;
		wr_en = 1;
		rd_en = 0;
		oe_en = 0;
		data_in = 8'd255;
		address = 4'd15;#100;
		wr_en = 0;
		rd_en = 1;
		oe_en = 1;
		data_in = 8'd14;
		address = 4'd15;#100;
		wr_en = 1;
		rd_en = 0;
		oe_en = 0;
		data_in = 8'd10;
		address = 4'd12;#100;
		wr_en = 0;
		rd_en = 1;
		oe_en = 1;
		data_in = 8'd14;
		address = 4'd12;#100;
	end
      always #50 clk=~clk;
endmodule

